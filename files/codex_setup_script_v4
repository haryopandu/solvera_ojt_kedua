Di bawah ini adalah perbaikan setup script untuk Codex OpenAI yang mencakup pengujian Odoo 18 versi 4 berdasarkan versi awal

#!/usr/bin/env bash
# =========================================================
#  Setup ringan & tahan banting untuk Codex/OpenAPI & WSL
#  - Default: SAFE_MODE=1 => tanpa apt, tanpa service
#  - Local WSL: jalankan SAFE_MODE=0 untuk setup penuh
# =========================================================
set -Eeuo pipefail
trap 'echo "[setup] Gagal di line $LINENO (exit $?)" >&2' ERR
SCRIPT_PATH="$0"
if [[ "$SCRIPT_PATH" != /* ]]; then
  SCRIPT_PATH="$(pwd)/$SCRIPT_PATH"
fi

# =========================
#  Variabel (bisa dioverride lewat ENV)
# =========================
USER_HOME="${USER_HOME:-/home/codex}"          # ganti ke /home/haryo bila dipakai di WSL
VENV_DIR="${VENV_DIR:-$USER_HOME/.venvs/odoo18}"
WORK_DIR="${WORK_DIR:-$USER_HOME/work}"        # untuk menaruh Odoo core
ODOO_DIR="${ODOO_DIR:-$WORK_DIR/odoo}"         # lokasi clone Odoo 18
CUSTOM_ADDONS="${CUSTOM_ADDONS:-$USER_HOME/custom_addons}"  # lokasi addon kustom
DB_NAME="${ODOO_DB_NAME:-odoo18}"
TEST_DB_NAME="${ODOO_TEST_DB_NAME:-${DB_NAME}_test}"  # DB khusus tes Odoo
TEST_TAGS="${ODOO_TEST_TAGS:-solvera_ojt_core}"      # Tag tes bawaan modul
RUN_TESTS="${RUN_TESTS:-0}"                          # Set ke 1 untuk menjalankan tes setelah setup

# SAFE_MODE:
#  - "1"  : ringan (default) -> skip apt, postgres, clone
#  - "0"  : berat  (khusus lokal) -> boleh apt, postgres, clone
#  - "auto": deteksi; di CI/cloud tetap anggap 1 (aman)
SAFE_MODE="${SAFE_MODE:-auto}"
if [ "$SAFE_MODE" = "auto" ]; then
  # Deteksi CI/cloud -> selalu ringan
  if [ -n "${CI:-}${GITHUB_ACTIONS:-}${CODESPACES:-}${CODEBUILD_BUILD_ID:-}${CODEX:-}" ]; then
    SAFE_MODE="1"
  else
    # Di mesin lokal, tetap default ringan kecuali eksplisit
    SAFE_MODE="1"
  fi
fi
do_heavy() { [ "$SAFE_MODE" = "0" ]; }

# =========================
#  Utilitas kecil
# =========================
# run_or_warn: jalankan perintah non-kritis; jika gagal, lanjut.
run_or_warn() { "$@" || echo "[setup] (non-kritikal) perintah gagal: $*"; }

# =========================
#  Direktori & izin dasar
# =========================
export DEBIAN_FRONTEND=noninteractive
run_or_warn mkdir -p "$USER_HOME/.cache/pip" "$USER_HOME/.cache/npm" "$USER_HOME/.odoo" "$WORK_DIR" "$CUSTOM_ADDONS" "$(dirname "$VENV_DIR")"

# chown hanya jika root; di runner non-root biasanya tidak perlu
if [ "$(id -u)" -eq 0 ]; then
  run_or_warn chown -R "$(id -u)":"$(id -g)" "$USER_HOME/.cache" "$USER_HOME/.odoo"
fi

# =========================
#  Paket sistem (opsional & hanya lokal)
# =========================
if do_heavy && command -v apt-get >/dev/null 2>&1; then
  echo "[setup] Mode berat: install paket sistem…"
  run_or_warn apt-get update -y
  run_or_warn apt-get install -y --no-install-recommends \
    git build-essential curl ca-certificates gnupg pkg-config \
    python3-dev python3-venv python3-pip python3-setuptools python3-wheel \
    libpq-dev libxml2-dev libxslt1-dev libjpeg-dev libpng-dev zlib1g-dev \
    libldap2-dev libsasl2-dev libffi-dev libssl-dev \
    fonts-dejavu-core xfonts-75dpi xfonts-base wkhtmltopdf
else
  echo "[setup] SAFE_MODE aktif: lewati install paket sistem."
fi

# =========================
#  Python venv & pip (ringan; no-op bila gagal)
# =========================
PY_BIN="${PY_BIN:-python3}"
if ! command -v "$PY_BIN" >/dev/null 2>&1; then PY_BIN="python"; fi

if command -v "$PY_BIN" >/dev/null 2>&1; then
  if [ ! -d "$VENV_DIR" ]; then
    run_or_warn "$PY_BIN" -m venv "$VENV_DIR"
  fi
  if [ -f "$VENV_DIR/bin/activate" ]; then
    # shellcheck disable=SC1090
    source "$VENV_DIR/bin/activate" || true
    run_or_warn python -m pip install --upgrade pip wheel
  fi

  # Install requirements proyek (jika ada) tapi jangan gagal keras
  if [ -f "requirements.txt" ]; then
    run_or_warn python -m pip install --upgrade --upgrade-strategy only-if-needed -r requirements.txt
  fi

  # Paket umum Odoo – gunakan binary wheels jika ada; gagal? lanjut.
  # Catatan: hindari build-from-source di cloud.
  run_or_warn python -m pip install --only-binary=:all: \
    "psycopg2-binary==2.9.9" "werkzeug" "num2words" "passlib" "babel" "pillow" "reportlab"

  # lxml sering butuh header; coba wheel dulu, jika tidak ada biarkan skip
  run_or_warn python -m pip install --only-binary=:all: "lxml"
else
  echo "[setup] Python tidak ditemukan; lanjut tanpa venv/pip."
fi

# =========================
#  PostgreSQL lokal (opsional & hanya lokal)
# =========================
if do_heavy; then
  if ! command -v psql >/dev/null 2>&1 && command -v apt-get >/dev/null 2>&1; then
    echo "[setup] Install PostgreSQL 17 (lokal)…"
    run_or_warn install -d /usr/share/postgresql-common/pgdg
    run_or_warn sh -c 'echo "deb [arch=amd64,arm64] http://apt.postgresql.org/pub/repos/apt $(. /etc/os-release && echo $VERSION_CODENAME)-pgdg main" > /etc/apt/sources.list.d/pgdg.list'
    run_or_warn curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | gpg --dearmor -o /etc/apt/trusted.gpg.d/pgdg.gpg
    run_or_warn apt-get update -y
    run_or_warn apt-get install -y postgresql-17 postgresql-client-17
  fi

  if command -v psql >/dev/null 2>&1; then
    # Init cluster lokal di $USER_HOME/pgdata (idempotent)
    if [ ! -d "$USER_HOME/pgdata" ]; then
      run_or_warn su -s /bin/bash -c "/usr/lib/postgresql/17/bin/initdb -D $USER_HOME/pgdata" postgres
    fi
    run_or_warn su -s /bin/bash -c "/usr/lib/postgresql/17/bin/pg_ctl -D $USER_HOME/pgdata -l $USER_HOME/pg.log -o '-p 5432' start" postgres
    # Buat role/db jika belum ada
    run_or_warn psql -U postgres -h 127.0.0.1 -p 5432 -tc "SELECT 1 FROM pg_roles WHERE rolname = 'odoo'" | grep -q 1 || \
      run_or_warn psql -U postgres -h 127.0.0.1 -p 5432 -c "CREATE USER odoo WITH PASSWORD 'odoo' CREATEDB;"
    run_or_warn psql -U postgres -h 127.0.0.1 -p 5432 -tc "SELECT 1 FROM pg_database WHERE datname = '${DB_NAME}'" | grep -q 1 || \
      run_or_warn psql -U postgres -h 127.0.0.1 -p 5432 -c "CREATE DATABASE ${DB_NAME} OWNER odoo;"
  else
    echo "[setup] PostgreSQL tidak tersedia; gunakan DB URI eksternal."
  fi
else
  echo "[setup] SAFE_MODE aktif: lewati PostgreSQL lokal."
fi

# =========================
#  Odoo core (opsional & hanya lokal)
# =========================
CORE_ADDONS=""
ODOO_BIN=""
if do_heavy; then
  if [ ! -d "$ODOO_DIR" ]; then
    run_or_warn mkdir -p "$WORK_DIR"
    run_or_warn git clone --depth 1 --branch 18.0 https://github.com/odoo/odoo.git "$ODOO_DIR"
  fi

  if [ -d "$ODOO_DIR/odoo/addons" ]; then
    CORE_ADDONS="$ODOO_DIR/odoo/addons"
    ODOO_BIN="$ODOO_DIR/odoo/odoo-bin"
  elif [ -d "$ODOO_DIR/addons" ]; then
    CORE_ADDONS="$ODOO_DIR/addons"
    ODOO_BIN="$ODOO_DIR/odoo-bin"
  fi
else
  echo "[setup] SAFE_MODE aktif: lewati clone Odoo core."
fi

# =========================
#  Eksekusi tes modul (opsional)
# =========================
run_tests() {
  if [ -z "$ODOO_BIN" ]; then
    echo "[tests] Lewati: odoo-bin tidak ditemukan."
    return
  fi

  echo "[tests] Menjalankan tes untuk tag: ${TEST_TAGS} (DB: ${TEST_DB_NAME})"

  local conn_flags=()
  if [ -n "$DB_HOST" ]; then
    conn_flags+=(--host "$DB_HOST")
  fi
  if [ -n "$DB_PORT" ]; then
    conn_flags+=(--port "$DB_PORT")
  fi
  if [ -n "$DB_USER" ]; then
    conn_flags+=(--username "$DB_USER")
  fi

  local env_prefix=()
  if [ -n "$DB_PASSWORD" ]; then
    env_prefix=(env "PGPASSWORD=$DB_PASSWORD")
  fi

  # Bersihkan database uji sebelumnya bila utilitas tersedia
  if command -v dropdb >/dev/null 2>&1; then
    local dropdb_cmd=("${env_prefix[@]}" dropdb "${conn_flags[@]}" --if-exists "${TEST_DB_NAME}")
    run_or_warn "${dropdb_cmd[@]}"
  fi
  if command -v createdb >/dev/null 2>&1; then
    local create_db_args=()
    if [ -n "$DB_OWNER" ]; then
      create_db_args+=(-O "$DB_OWNER")
    fi
    local createdb_cmd=("${env_prefix[@]}" createdb "${conn_flags[@]}" "${create_db_args[@]}" "${TEST_DB_NAME}")
    run_or_warn "${createdb_cmd[@]}"
  fi

  run_or_warn "${ODOO_BIN}" \
    -c "$USER_HOME/.odoo/odoo.conf" \
    -d "${TEST_DB_NAME}" \
    --db-filter="^${TEST_DB_NAME}$" \
    --test-tags="${TEST_TAGS}" \
    --log-level=test \
    --stop-after-init \
    --workers=0
}

# =========================
#  Tulis ~/.odoo/odoo.conf (aman dipakai baik lokal maupun cloud)
# =========================
DB_URI="${POSTGRES_URI:-postgresql://odoo:odoo@127.0.0.1:5432/${DB_NAME}}"
DB_USER="${ODOO_DB_USER:-}"
DB_PASSWORD="${ODOO_DB_PASSWORD:-}"
DB_HOST="${ODOO_DB_HOST:-}"
DB_PORT="${ODOO_DB_PORT:-}"

URI_NO_SCHEME="${DB_URI#*://}"
HOST_AND_DB="$URI_NO_SCHEME"
if [[ "$URI_NO_SCHEME" == *@* ]]; then
  CREDENTIALS="${URI_NO_SCHEME%%@*}"
  HOST_AND_DB="${URI_NO_SCHEME#*@}"
  if [ -z "$DB_USER" ]; then
    DB_USER="${CREDENTIALS%%:*}"
  fi
  if [ -z "$DB_PASSWORD" ] && [[ "$CREDENTIALS" == *:* ]]; then
    DB_PASSWORD="${CREDENTIALS#*:}"
  fi
fi

HOST_SEGMENT="${HOST_AND_DB%%/*}"
if [ -z "$DB_HOST" ] && [ -n "$HOST_SEGMENT" ]; then
  if [[ "$HOST_SEGMENT" == \[* ]]; then
    HOST_BODY="${HOST_SEGMENT%%]*}"
    HOST_BODY="${HOST_BODY#[}"
    DB_HOST="$HOST_BODY"
    if [[ "$HOST_SEGMENT" == *]*:* ]]; then
      PORT_CANDIDATE="${HOST_SEGMENT##*:}"
      if [ -z "$DB_PORT" ]; then
        DB_PORT="$PORT_CANDIDATE"
      fi
    fi
  else
    if [[ "$HOST_SEGMENT" == *:* ]]; then
      PORT_CANDIDATE="${HOST_SEGMENT##*:}"
      HOST_CANDIDATE="${HOST_SEGMENT%%:*}"
      if [ -z "$DB_PORT" ] && [ "$HOST_SEGMENT" != "$PORT_CANDIDATE" ]; then
        DB_PORT="$PORT_CANDIDATE"
      fi
      DB_HOST="$HOST_CANDIDATE"
    else
      DB_HOST="$HOST_SEGMENT"
    fi
  fi
fi

DB_OWNER="$DB_USER"
mkdir -p "$USER_HOME/.odoo"
umask 077  # izin ketat untuk file rahasia
# addons_path: repo saat ini + CUSTOM_ADDONS + (CORE_ADDONS jika ada)
ADDONS_LINE="$(pwd),${CUSTOM_ADDONS}"
if [ -n "$CORE_ADDONS" ]; then
  ADDONS_LINE="${CORE_ADDONS},${ADDONS_LINE}"
fi
cat > "$USER_HOME/.odoo/odoo.conf" <<EOF
[options]
db_uri = ${DB_URI}
addons_path = ${ADDONS_LINE}
admin_passwd = ${ODOO_ADMIN_PASSWORD:-admin}
# SMTP (opsional)
smtp_server = ${SMTP_HOST:-}
smtp_port = ${SMTP_PORT:-}
smtp_ssl = ${SMTP_SSL:-False}
smtp_user = ${SMTP_USER:-}
smtp_password = ${SMTP_PASSWORD:-}
EOF
chmod 600 "$USER_HOME/.odoo/odoo.conf"

# Jalankan tes jika diminta
if [ "$RUN_TESTS" = "1" ]; then
  run_tests
fi

# =========================
#  Sanity output
# =========================
echo "[OK] Setup selesai. Mode: SAFE_MODE=${SAFE_MODE}"
command -v python  && python --version || true
command -v wkhtmltopdf && wkhtmltopdf --version || true
command -v psql && psql --version || true

# Petunjuk (akan bekerja jika Odoo core tersedia & DB siap)
if [ -n "$ODOO_BIN" ]; then
  cat <<EOM

# =========================
#  Cara pakai (copy-paste)
# =========================
# Update modul Anda saja lalu berhenti:
${ODOO_BIN} -c $USER_HOME/.odoo/odoo.conf -d "${DB_NAME}" -u solvera_ojt_core --stop-after-init

# Mode dev dengan auto-reload:
${ODOO_BIN} -c $USER_HOME/.odoo/odoo.conf -d "${DB_NAME}" --dev=reload

# Jalankan tes modul solvera_ojt_core (jalankan ulang script dengan RUN_TESTS=1):
RUN_TESTS=1 SAFE_MODE=0 bash "$SCRIPT_PATH"

# Catatan:
# - Di runner cloud, Odoo core & DB lokal biasanya tidak tersedia.
# - Di WSL lokal, jalankan ulang dengan SAFE_MODE=0 untuk instal penuh.
EOM
else
  echo "[info] Odoo core tidak terdeteksi (ini normal di SAFE_MODE/cloud)."
fi
