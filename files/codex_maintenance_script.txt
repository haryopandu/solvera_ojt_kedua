Di bawah ini adalah maintenance script idempotent yang disarankan oleh ChatGPT untuk eksekusi kode (code execution) Codex OpenAI setelah mempertimbangkan saran dari Codex. Script ini kompatibel dengan Odoo 18, PostgreSQL 17, dan Python 3.12.12 yang diinstal di WSL

#!/usr/bin/env bash
# ===========================================================
#  Maintenance ringan untuk Codex/OpenAPI & WSL
#  - Smoke test stdlib (Python/XML/manifest)
#  - Pip refresh ringan
#  - Odoo -u opsional (hanya bila diminta)
# ===========================================================
set -Eeuo pipefail
trap 'echo "[maint] Gagal di line $LINENO (exit $?)" >&2' ERR

# =========================
#  Configurable defaults
# =========================
USER_HOME="${USER_HOME:-/home/codex}"                 # ganti ke /home/haryo bila di WSL
VENV_DIR="${VENV_DIR:-$USER_HOME/.venvs/odoo18}"      # lokasi venv Python
ODOO_DIR="${ODOO_DIR:-$USER_HOME/work/odoo}"          # lokasi Odoo core (git clone 18.0)
CUSTOM_ADDONS="${CUSTOM_ADDONS:-$USER_HOME/custom_addons}"
ODOO_CONF="${ODOO_CONF:-$USER_HOME/.odoo/odoo.conf}"  # file konfigurasi Odoo
DB_NAME_FALLBACK="${ODOO_DB_NAME:-odoo18}"

# Perilaku
ADDONS_DIR="${ADDONS_DIR:-addons}"         # root addons di repo ini
HARD_FAIL="${HARD_FAIL:-0}"                # 0=lapor saja, 1=gagal keras jika ada error smoke test
RUN_ODOO_UPDATES="${RUN_ODOO_UPDATES:-0}"  # 1=jalankan -u modul (butuh odoo-bin & DB)
AUTO_UPDATE_MODULES="${AUTO_UPDATE_MODULES:-solvera_ojt_core}"  # modul terpisah koma

# =========================
#  Helper
# =========================
run_or_warn() { "$@" || echo "[maint] (non-kritikal) perintah gagal: $*"; }

# =========================
#  Venv (opsional)
# =========================
if [ -f "$VENV_DIR/bin/activate" ]; then
  # shellcheck disable=SC1090
  source "$VENV_DIR/bin/activate" || true
fi

# =========================
#  Quick deps refresh (ringan)
# =========================
if [ -f "requirements.txt" ]; then
  run_or_warn python3 -m pip install --upgrade --upgrade-strategy only-if-needed -r requirements.txt
fi

# =========================
#  Smoke test stdlib: .py compile + .xml parse + manifest check
#  - Tidak butuh Odoo terpasang
# =========================
SMOKE_TMP="$(mktemp)"
python3 - <<'PY' >"$SMOKE_TMP" || true
import os, sys, py_compile, ast
from xml.etree import ElementTree as ET

ROOT = os.path.abspath(".")
ADDONS = os.path.abspath(os.environ.get("ADDONS_DIR", "addons"))
SKIP_DIRS = {".git",".venv",".venvs","env","node_modules","__pycache__","build","dist",".ruff_cache",".mypy_cache",".pytest_cache",".idea",".vscode"}
REQ_KEYS = {"name","version","depends"}

errs = []

def skipdir(d): return d in SKIP_DIRS or d.startswith(".")

def check_py(root):
    for b, ds, fs in os.walk(root):
        ds[:] = [d for d in ds if not skipdir(d)]
        for f in fs:
            if f.endswith(".py"):
                p = os.path.join(b,f)
                try: py_compile.compile(p, doraise=True)
                except Exception as e: errs.append((p, f"Python syntax error: {e}"))

def check_xml(root):
    for b, ds, fs in os.walk(root):
        ds[:] = [d for d in ds if not skipdir(d)]
        for f in fs:
            if f.endswith(".xml"):
                p = os.path.join(b,f)
                try:
                    with open(p,"rb") as fh: ET.parse(fh)
                except Exception as e: errs.append((p, f"XML parse error: {e}"))

def read_manifest_dict(path):
    with open(path,"r",encoding="utf-8") as fh: src = fh.read()
    t = ast.parse(src, filename=path)
    for n in t.body:
        if isinstance(n, ast.Assign) and isinstance(n.value, ast.Dict):
            try: return ast.literal_eval(n.value)
            except Exception: return None
    return None

def check_manifest(addons_root):
    for b, ds, fs in os.walk(addons_root):
        ds[:] = [d for d in ds if not skipdir(d)]
        if "__manifest__.py" in fs:
            mp = os.path.join(b,"__manifest__.py")
            m = read_manifest_dict(mp)
            if not isinstance(m, dict):
                errs.append((mp, "Manifest is not a plain dict literal."))
                continue
            miss = REQ_KEYS - set(m.keys())
            if miss: errs.append((mp, f"Missing keys in manifest: {sorted(miss)}"))
            if "depends" in m and not isinstance(m["depends"], (list, tuple)):
                errs.append((mp, "'depends' harus berupa list/tuple"))

check_py(ROOT)
check_xml(ROOT)
if os.path.isdir(ADDONS): check_manifest(ADDONS)

if errs:
    print("=== Smoke Test Errors ===")
    for p,msg in errs: print(f"- {p}: {msg}")
    print(f"Total errors: {len(errs)}")
    sys.exit(2)
else:
    print("Smoke test passed âœ“")
    sys.exit(0)
PY

SMOKE_RC=$?
cat "$SMOKE_TMP" || true
rm -f "$SMOKE_TMP"

if [ "$SMOKE_RC" -ne 0 ]; then
  if [ "$HARD_FAIL" = "1" ]; then
    echo "[maint] HARD_FAIL=1 -> gagal."
    exit "$SMOKE_RC"
  else
    echo "[maint] HARD_FAIL=0 -> lanjut walau ada error."
  fi
fi

# =========================
#  Cari odoo-bin (opsional)
# =========================
ODOO_BIN=""
candidates=(
  "$ODOO_DIR/odoo/odoo-bin"
  "$ODOO_DIR/odoo-bin"
  "$(pwd)/.deps/odoo/odoo/odoo-bin"
  "$(pwd)/.deps/odoo/odoo-bin"
)
for b in "${candidates[@]}"; do
  if [ -x "$b" ]; then ODOO_BIN="$b"; break; fi
done

# =========================
#  Parse db_uri (untuk -u atau backup jika dibutuhkan)
# =========================
DB_URI="$(awk -F'=' '/^[[:space:]]*db_uri[[:space:]]*=/{sub(/^[ \t]+/,"",$2); sub(/[ \t]+$/,"",$2); print $2}' "$ODOO_CONF" 2>/dev/null || true)"
if [ -z "${DB_URI:-}" ]; then
  DB_URI="postgresql://odoo:odoo@127.0.0.1:5432/${DB_NAME_FALLBACK}"
fi

# =========================
#  Odoo -u modul (opsional & aman dilewati)
# =========================
if [ "$RUN_ODOO_UPDATES" = "1" ] && [ -n "$ODOO_BIN" ]; then
  IFS=',' read -r -a _mods <<< "$AUTO_UPDATE_MODULES"
  for m in "${_mods[@]}"; do
    m="$(echo "$m" | xargs)"; [ -z "$m" ] && continue
    run_or_warn "$ODOO_BIN" -c "$ODOO_CONF" -d "${DB_NAME_FALLBACK}" -u "$m" --stop-after-init
  done
else
  echo "[maint] RUN_ODOO_UPDATES=0 atau odoo-bin tidak ditemukan; lewati -u."
fi

echo "[OK] Maintenance selesai (HARD_FAIL=${HARD_FAIL})."
