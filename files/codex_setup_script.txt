#!/usr/bin/env bash
# =========================================================
#  Setup Odoo 18 - Python 3.12 friendly + Codex logs fixes
#  - Layout: ~/.venvs/odoo18, ~/work/odoo, ~/custom_addons
#  - Python 3.12, PostgreSQL 15+
#  - Heavy mode (SAFE_MODE=0): apt install (PG15, headers), clone Odoo, install pinned deps
#  - Test persis sesuai dokumentasi (addons-path & test-tags)
#  - Reset DB uji setiap run (drop + create)
#  - Graceful skip python-ldap jika header tidak ada
#  - WSL UNC -> Linux path normalizer
#  - odoo-bin fallback: jalankan via "python odoo-bin" bila tidak executable
# =========================================================
set -Eeuo pipefail
trap 'echo "[setup] Gagal di line $LINENO (exit $?)" >&2' ERR

# ---------------------------------------------------------
#  Lokasi skrip (untuk echo perintah one-shot yang akurat)
# ---------------------------------------------------------
SCRIPT_PATH="$0"
case "$SCRIPT_PATH" in
  /*) : ;;
  *) SCRIPT_PATH="$(pwd)/$SCRIPT_PATH" ;;
esac

# =========================
#  Variabel (bisa dioverride via ENV)
# =========================
USER_HOME="${USER_HOME:-$HOME}"
VENV_DIR="${VENV_DIR:-$USER_HOME/.venvs/odoo18}"
WORK_DIR="${WORK_DIR:-$USER_HOME/work}"
ODOO_DIR="${ODOO_DIR:-$WORK_DIR/odoo}"
CUSTOM_ADDONS="${CUSTOM_ADDONS:-$USER_HOME/custom_addons}"

DB_NAME="${ODOO_DB_NAME:-odoo18}"
TEST_DB_NAME="${ODOO_TEST_DB_NAME:-${DB_NAME}_test}"

# Tag/opsi test persis dokumentasi
TEST_MODULE_TAG="${TEST_MODULE_TAG:-solvera_ojt_core}"
ODOO_EXTRA_TEST_TAGS="${ODOO_EXTRA_TEST_TAGS:-}"
ODOO_ENABLE_COVERAGE="${ODOO_ENABLE_COVERAGE:-0}"

# Artefak laporan
TS="${TS:-$(date +%Y%m%d-%H%M%S)}"
TEST_REPORT_ROOT="${TEST_REPORT_ROOT:-$USER_HOME/.odoo/test-reports}"
TEST_REPORT_DIR="$TEST_REPORT_ROOT/$TS"
TEST_LOG_DIR="${TEST_LOG_DIR:-$USER_HOME/.odoo}"
TEST_LOG="$TEST_LOG_DIR/test-$TS.log"
TEST_LOG_LATEST="$TEST_LOG_DIR/test-latest.log"
ODOO_TEST_TIMEOUT="${ODOO_TEST_TIMEOUT:-900}"

# Koneksi DB (default PG15 lokal)
DB_URI="${POSTGRES_URI:-postgresql://odoo:odoo@127.0.0.1:5432/${DB_NAME}}"
POSTGRES_URI_TEST="${POSTGRES_URI_TEST:-$DB_URI}"
DB_REQUIRE_CREATEDB="${DB_REQUIRE_CREATEDB:-1}"

# Mode eksekusi
SAFE_MODE="${SAFE_MODE:-0}"          # di laptop heavy default
RUN_TESTS="${RUN_TESTS:-1}"
ODOO_ALLOW_CLONE="${ODOO_ALLOW_CLONE:-1}"
ODOO_INSTALL_PINNED="${ODOO_INSTALL_PINNED:-$([ "$SAFE_MODE" = "0" ] && echo 1 || echo 0)}"
DRY_RUN="${DRY_RUN:-0}"
USE_CODEX_SETUP_V4="${USE_CODEX_SETUP_V4:-0}"  # 1=jalankan files/codex_setup_script_v4 dulu jika ada

# =========================
#  Utilitas umum
# =========================
_print_cmd(){ printf '%q ' "$@"; printf '\n'; }
run_or_warn(){ if [ "$DRY_RUN" = "1" ]; then echo "[dry-run] $(_print_cmd "$@")"; else "$@" || echo "[setup] (non-kritikal) gagal: $*"; fi; }
run_or_fail(){ if [ "$DRY_RUN" = "1" ]; then echo "[dry-run] $(_print_cmd "$@")"; else "$@"; fi; }
have_timeout=0; command -v timeout >/dev/null 2>&1 && have_timeout=1
redact_uri(){ printf '%s' "$1" | sed -E 's#(://)([^:/@]+):([^@]+)@#\1****:****@#'; }

# Eksekusi sebagai user postgres (tanpa wajib sudo)
_as_postgres(){
  if command -v sudo >/dev/null 2>&1; then
    sudo -u postgres "$@"
  else
    su -s /bin/bash -c "$(_print_cmd "$@")" postgres
  fi
}

# Normalisasi path UNC WSL -> Linux
normalize_odoopath() {
  local p="$1"
  case "$p" in
    \\\\wsl.localhost\\* )
      p="$(printf '%s' "$p" | sed -E 's#^\\\\wsl\.localhost\\[^\\]+\\#/#; s#\\#/#g')"
      ;;
  esac
  printf '%s' "$p"
}
ODOO_DIR="$(normalize_odoopath "$ODOO_DIR")"
CUSTOM_ADDONS="$(normalize_odoopath "$CUSTOM_ADDONS")"

# =========================
#  Direktori dasar
# =========================
run_or_warn mkdir -p "$VENV_DIR" "$WORK_DIR" "$CUSTOM_ADDONS" "$TEST_REPORT_DIR" "$TEST_LOG_DIR" "$USER_HOME/.odoo"

# =========================
#  Optional: panggil files/codex_setup_script_v4
# =========================
if [ "$USE_CODEX_SETUP_V4" = "1" ] && [ -x "files/codex_setup_script_v4" ]; then
  echo "[setup] Menjalankan files/codex_setup_script_v4 (SAFE_MODE=0, RUN_TESTS=0)"
  SAFE_MODE=0 RUN_TESTS=0 ./files/codex_setup_script_v4
fi

# =========================
#  Paket sistem (heavy only): Python 3.12 & PostgreSQL 15 + header LDAP
# =========================
if [ "$SAFE_MODE" = "0" ] && command -v apt-get >/dev/null 2>&1; then
  echo "[setup] Heavy mode: install Python 3.12, PG15 dan header pengembangan"
  run_or_warn apt-get update -y

  # Tambah repo PGDG jika perlu
  if ! apt-cache policy postgresql-15 | grep -q "Candidate:"; then
    CODENAME="$(. /etc/os-release && echo "$VERSION_CODENAME")"
    run_or_warn install -d /usr/share/postgresql-common/pgdg
    echo "deb [arch=amd64,arm64] http://apt.postgresql.org/pub/repos/apt $CODENAME-pgdg main" | run_or_warn tee /etc/apt/sources.list.d/pgdg.list >/dev/null
    curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc | run_or_warn gpg --dearmor -o /etc/apt/trusted.gpg.d/pgdg.gpg
    run_or_warn apt-get update -y
  fi

  run_or_warn apt-get install -y --no-install-recommends \
    git curl ca-certificates gnupg build-essential pkg-config \
    python3.12 python3.12-venv python3-pip python3-setuptools python3-wheel \
    postgresql-15 postgresql-client-15 \
    libpq-dev libxml2-dev libxslt1-dev libjpeg-dev libpng-dev zlib1g-dev \
    libldap2-dev libsasl2-dev libffi-dev libssl-dev

  # Init & start PG15 (idempotent)
  if [ ! -d "$USER_HOME/pgdata15" ]; then
    run_or_warn _as_postgres /usr/lib/postgresql/15/bin/initdb -D "$USER_HOME/pgdata15"
  fi
  run_or_warn _as_postgres /usr/lib/postgresql/15/bin/pg_ctl -D "$USER_HOME/pgdata15" -l "$USER_HOME/pg15.log" -o "-p 5432" start

  # Role/db default
  _has_role="$(psql -U postgres -h 127.0.0.1 -p 5432 -tAc "SELECT COUNT(*) FROM pg_roles WHERE rolname='odoo'" 2>/dev/null || echo 0)"
  [ "$_has_role" = "1" ] || run_or_warn psql -U postgres -h 127.0.0.1 -p 5432 -c "CREATE USER odoo WITH PASSWORD 'odoo' CREATEDB;"
  _has_db="$(psql -U postgres -h 127.0.0.1 -p 5432 -tAc "SELECT COUNT(*) FROM pg_database WHERE datname='${DB_NAME}'" 2>/dev/null || echo 0)"
  [ "$_has_db" = "1" ] || run_or_warn psql -U postgres -h 127.0.0.1 -p 5432 -c "CREATE DATABASE ${DB_NAME} OWNER odoo;"
else
  echo "[setup] SAFE_MODE=1 atau apt-get tidak tersedia: lewati instal paket sistem"
fi

# =========================
#  Virtualenv Python 3.12 + deps wheels + pin Werkzeug
# =========================
PY_BIN="${PY_BIN:-python3.12}"
command -v "$PY_BIN" >/dev/null 2>&1 || PY_BIN="python3"
command -v "$PY_BIN" >/dev/null 2>&1 || PY_BIN="python"

[ -d "$VENV_DIR" ] || run_or_fail "$PY_BIN" -m venv "$VENV_DIR"
# shellcheck disable=SC1090
. "$VENV_DIR/bin/activate" || { echo "[setup] Gagal aktivasi venv: $VENV_DIR"; exit 2; }
python -m pip install --upgrade pip wheel

# Wheels cepat untuk Odoo 18 (tanpa werkzeug dulu)
python - <<'PY' || true
import sys, subprocess
pkgs = [
  "Babel","decorator","docutils","Jinja2","MarkupSafe","Mako",
  "lxml","Pillow","passlib","psycopg2-binary==2.9.9","python-dateutil",
  "pytz","qrcode","reportlab","requests","urllib3",
  "num2words","psutil","XlsxWriter","xlrd"
]
subprocess.call([sys.executable,"-m","pip","install","--only-binary=:all:",*pkgs])
PY

# Pin werkzeug sesuai versi Python (3.12 => 3.0.1)
PYVER=$(python - <<'PY'
import sys; print(f"{sys.version_info.major}.{sys.version_info.minor}")
PY
)
case "$PYVER" in
  3.12|3.13) python -m pip install "Werkzeug==3.0.1" ;;
  3.11)      python -m pip install "Werkzeug==2.2.2" ;;
  *)         python -m pip install "Werkzeug==2.0.2" ;;
esac

[ "$ODOO_ENABLE_COVERAGE" = "1" ] && run_or_warn python -m pip install --only-binary=:all: coverage

# =========================
#  Clone Odoo 18 ke ~/work/odoo (heavy atau jika diizinkan)
# =========================
if [ "$ODOO_ALLOW_CLONE" = "1" ] && [ ! -d "$ODOO_DIR" ]; then
  if ! command -v git >/dev/null 2>&1; then
    echo "[setup] ERROR: git tidak tersedia untuk clone Odoo"
    exit 6
  fi
  echo "[setup] Clone Odoo 18 ke $ODOO_DIR"
  run_or_warn mkdir -p "$WORK_DIR"
  run_or_fail git clone --depth 1 --branch 18.0 https://github.com/odoo/odoo.git "$ODOO_DIR"
fi

# Lokasi core addons & odoo-bin (prefer top-level addons)
CORE_ADDONS=""
if   [ -d "$ODOO_DIR/addons" ]; then CORE_ADDONS="$ODOO_DIR/addons"
elif [ -d "$ODOO_DIR/odoo/addons" ]; then CORE_ADDONS="$ODOO_DIR/odoo/addons"
fi

ODOO_BIN_PATH=""
if   [ -f "$ODOO_DIR/odoo/odoo-bin" ]; then ODOO_BIN_PATH="$ODOO_DIR/odoo/odoo-bin"
elif [ -f "$ODOO_DIR/odoo-bin" ]; then      ODOO_BIN_PATH="$ODOO_DIR/odoo-bin"
fi

# Heavy: install pinned requirements Odoo dengan fallback skip python-ldap
install_odoo_pinned() {
  if [ -f "$ODOO_DIR/requirements.txt" ]; then
    if ! python -m pip install -r "$ODOO_DIR/requirements.txt"; then
      echo "[setup] requirements.txt gagal (kemungkinan python-ldap). Coba ulang tanpa python-ldap..."
      grep -vi '^python-ldap' "$ODOO_DIR/requirements.txt" > /tmp/req-no-ldap.txt
      python -m pip install -r /tmp/req-no-ldap.txt || true
      echo "[setup] Melewati python-ldap (fitur LDAP optional)."
    fi
  fi
}
if [ "$SAFE_MODE" = "0" ] && [ "$ODOO_INSTALL_PINNED" = "1" ]; then
  install_odoo_pinned
fi

# =========================
#  Tulis odoo.conf (addons-path persis dokumentasi)
# =========================
ADDONS_PATH_EXACT="${CORE_ADDONS},${CUSTOM_ADDONS}"
umask 077
cat > "$USER_HOME/.odoo/odoo.conf" <<EOF
[options]
db_uri = ${DB_URI}
addons_path = ${ADDONS_PATH_EXACT}
admin_passwd = ${ODOO_ADMIN_PASSWORD:-admin}
EOF
chmod 600 "$USER_HOME/.odoo/odoo.conf"

# =========================
#  Buat runner untuk odoo-bin (chmod atau fallback python)
# =========================
ODOO_RUN=()
if [ -n "$ODOO_BIN_PATH" ]; then
  if [ -x "$ODOO_BIN_PATH" ]; then
    ODOO_RUN=( "$ODOO_BIN_PATH" )
  else
    chmod +x "$ODOO_BIN_PATH" 2>/dev/null || true
    if [ -x "$ODOO_BIN_PATH" ]; then
      ODOO_RUN=( "$ODOO_BIN_PATH" )
    else
      ODOO_RUN=( python "$ODOO_BIN_PATH" )
    fi
  fi
fi

# =========================
#  Assert path kunci sebelum tes
# =========================
assert_odoo_paths() {
  if [ -z "$ODOO_DIR" ] || [ ! -d "$ODOO_DIR" ]; then
    echo "[tests] ERROR: ODOO_DIR tidak ada: $ODOO_DIR"; exit 10
  fi
  if [ -z "$CORE_ADDONS" ] || [ ! -d "$CORE_ADDONS" ]; then
    echo "[tests] ERROR: CORE_ADDONS tidak ditemukan di $ODOO_DIR"; exit 11
  fi
  if [ ${#ODOO_RUN[@]} -eq 0 ]; then
    echo "[tests] ERROR: odoo-bin tidak ditemukan atau tidak dapat dijalankan: $ODOO_DIR"; exit 12
  fi
}

# =========================
#  Probe koneksi DB & hak CREATEDB
# =========================
probe_db_connect() {
  local uri="$1"; local need_create="${2:-0}"
  local rc=0
  REQUIRE_CREATE="$need_create" DB_URI_TEST_CONN="$uri" python - <<'PY' || rc=$?
import os, time
from urllib.parse import urlsplit
try:
  import psycopg2
except Exception:
  raise SystemExit(2)
u=urlsplit(os.environ["DB_URI_TEST_CONN"])
dbname="postgres" if not u.path or u.path=="/" else u.path.lstrip("/")
conn=psycopg2.connect(dbname=dbname,user=u.username,password=u.password,host=u.hostname,port=u.port or 5432)
if int(os.environ.get("REQUIRE_CREATE","0")):
  conn.autocommit=True
  cur=conn.cursor()
  cur.execute("SELECT 1")
  tmp="probe_tmp_%d" % int(time.time())
  try:
    cur.execute('CREATE DATABASE "%s"' % tmp)
    cur.execute('DROP DATABASE "%s"' % tmp)
  except Exception:
    raise SystemExit(3)
  finally:
    cur.close()
conn.close()
PY
  [ "$rc" = "2" ] && { echo "[tests] ERROR: psycopg2-binary belum terpasang"; return 1; }
  [ "$rc" = "3" ] && { echo "[tests] ERROR: user DB tidak punya CREATEDB"; return 1; }
  return "$rc"
}

# =========================
#  Reset DB uji (drop & create) seperti runner
# =========================
reset_test_db() {
  DB_URI_DROP_BASE="$POSTGRES_URI_TEST" TEST_DB_NAME="$TEST_DB_NAME" python - <<'PY'
import os
from urllib.parse import urlsplit
import psycopg2
u=urlsplit(os.environ["DB_URI_DROP_BASE"])
dbname="postgres" if not u.path or u.path=="/" else u.path.lstrip("/")
conn=psycopg2.connect(dbname=dbname,user=u.username,password=u.password,host=u.hostname,port=u.port or 5432)
conn.autocommit=True
cur=conn.cursor()
db=os.environ["TEST_DB_NAME"]
cur.execute("SELECT pg_terminate_backend(pid) FROM pg_stat_activity WHERE datname=%s AND pid<>pg_backend_pid()", (db,))
cur.execute('DROP DATABASE IF EXISTS "%s"' % db)
cur.execute('CREATE DATABASE "%s"' % db)
cur.close(); conn.close()
PY
}

# =========================
#  Snapshot artefak konfigurasi/env
# =========================
snapshot_run_env() {
  run_or_warn mkdir -p "$TEST_REPORT_DIR"
  cp -f "$USER_HOME/.odoo/odoo.conf" "$TEST_REPORT_DIR/odoo.conf" || true
  {
    echo "USER_HOME=$USER_HOME"
    echo "VENV_DIR=$VENV_DIR"
    echo "WORK_DIR=$WORK_DIR"
    echo "ODOO_DIR=$ODOO_DIR"
    echo "CORE_ADDONS=$CORE_ADDONS"
    echo "CUSTOM_ADDONS=$CUSTOM_ADDONS"
    echo "ODOO_BIN_PATH=$ODOO_BIN_PATH"
    echo "DB_URI=$(redact_uri "$DB_URI")"
    echo "POSTGRES_URI_TEST=$(redact_uri "$POSTGRES_URI_TEST")"
    echo "DB_NAME=$DB_NAME"
    echo "TEST_DB_NAME=$TEST_DB_NAME"
    echo "TEST_MODULE_TAG=$TEST_MODULE_TAG"
    echo "ODOO_EXTRA_TEST_TAGS=$ODOO_EXTRA_TEST_TAGS"
    echo "SAFE_MODE=$SAFE_MODE RUN_TESTS=$RUN_TESTS ODOO_ALLOW_CLONE=$ODOO_ALLOW_CLONE ODOO_INSTALL_PINNED=$ODOO_INSTALL_PINNED"
  } > "$TEST_REPORT_DIR/env.txt"
  ln -sf "$TS" "$TEST_REPORT_ROOT/latest" 2>/dev/null || true
}

# =========================
#  Jalankan tes persis seperti dokumentasi
# =========================
run_tests() {
  [ "$RUN_TESTS" = "1" ] || { echo "[setup] RUN_TESTS=0: lewati tes"; return 0; }
  assert_odoo_paths

  echo "[tests] Probe koneksi DB & hak CREATEDB"
  probe_db_connect "$POSTGRES_URI_TEST" "$DB_REQUIRE_CREATEDB" || { echo "[tests] DB tidak siap"; exit 4; }

  echo "[tests] Reset DB uji: $TEST_DB_NAME"
  reset_test_db

  : > "$TEST_LOG" || true
  ln -sf "$(basename "$TEST_LOG")" "$TEST_LOG_LATEST" 2>/dev/null || true

  snapshot_run_env

  local combined="/$TEST_MODULE_TAG"
  [ -n "$ODOO_EXTRA_TEST_TAGS" ] && combined="$combined,$ODOO_EXTRA_TEST_TAGS"

  echo "[tests] Menjalankan odoo-bin dengan addons-path dan test-tags sesuai dokumentasi"
  echo "[tests] addons-path: $ADDONS_PATH_EXACT"
  echo "[tests] test-tags: $combined"

  test_rc=0
  runner=()
  if [ "$ODOO_ENABLE_COVERAGE" = "1" ] && command -v coverage >/dev/null 2>&1; then
    runner=(coverage run -m)
  fi

  if [ "$have_timeout" -eq 1 ]; then
    timeout "$ODOO_TEST_TIMEOUT" "${runner[@]}" "${ODOO_RUN[@]}" \
      --addons-path="$ADDONS_PATH_EXACT" \
      -c "$USER_HOME/.odoo/odoo.conf" \
      -d "$TEST_DB_NAME" \
      --test-enable --test-tags="$combined" \
      --workers=0 --log-level=test --stop-after-init \
      --test-report-directory "$TEST_REPORT_DIR" | tee -a "$TEST_LOG" || test_rc=$?
  else
    "${runner[@]}" "${ODOO_RUN[@]}" \
      --addons-path="$ADDONS_PATH_EXACT" \
      -c "$USER_HOME/.odoo/odoo.conf" \
      -d "$TEST_DB_NAME" \
      --test-enable --test-tags="$combined" \
      --workers=0 --log-level=test --stop-after-init \
      --test-report-directory "$TEST_REPORT_DIR" | tee -a "$TEST_LOG" || test_rc=$?
  fi

  if [ "$ODOO_ENABLE_COVERAGE" = "1" ] && command -v coverage >/dev/null 2>&1; then
    coverage xml -o "$TEST_REPORT_DIR/coverage.xml" || true
    coverage html -d "$TEST_REPORT_DIR/coverage-html" || true
  fi

  if [ "$test_rc" -ne 0 ]; then
    echo "[tests] TEST GAGAL (rc=$test_rc). Log: $TEST_LOG ; Report: $TEST_REPORT_DIR/"
    exit "$test_rc"
  fi
  echo "[tests] TEST SUKSES. Log: $TEST_LOG ; Report: $TEST_REPORT_DIR/"
}

# =========================
#  Eksekusi
# =========================
run_tests

echo "[OK] Setup selesai."
echo "[OK] Odoo-bin: ${ODOO_BIN_PATH:-n/a}"
echo "[OK] Addons-path: ${ADDONS_PATH_EXACT}"
echo "[OK] DB_URI: $(redact_uri "$DB_URI") | POSTGRES_URI_TEST: $(redact_uri "$POSTGRES_URI_TEST")"
